{
  "name": "Nehonix ReliantType Embedded",
  "scopeName": "source.ts.fortify",
  "injectionSelector": "L:source.ts -comment -string, L:source.tsx -comment -string",
  "patterns": [
    {
      "include": "#fortify-interface-blocks"
    }
  ],
  "repository": {
    "fortify-interface-blocks": {
      "patterns": [
        {
          "name": "meta.interface-block.fortify",
          "begin": "\\b(Interface)\\s*\\(\\s*\\{",
          "end": "\\}\\s*\\)",
          "beginCaptures": {
            "1": {
              "name": "support.function.fortify.interface"
            }
          },
          "patterns": [
            {
              "include": "#fortify-object-properties"
            }
          ]
        }
      ]
    },
    "fortify-object-properties": {
      "patterns": [
        {
          "name": "meta.property.fortify",
          "begin": "([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*:\\s*(\")",
          "end": "(\"),?",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.fortify.property"
            },
            "2": {
              "name": "punctuation.definition.string.begin.fortify"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.fortify"
            }
          },
          "contentName": "string.quoted.double.fortify.schema",
          "patterns": [
            {
              "include": "#reliant-type-content"
            }
          ]
        },
        {
          "name": "meta.property.fortify",
          "begin": "([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*:\\s*(')",
          "end": "('),?",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.fortify.property"
            },
            "2": {
              "name": "punctuation.definition.string.begin.fortify"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.fortify"
            }
          },
          "contentName": "string.quoted.single.fortify.schema",
          "patterns": [
            {
              "include": "#reliant-type-content"
            }
          ]
        },
        {
          "name": "meta.property.fortify",
          "begin": "([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*:\\s*(`)",
          "end": "(`),?",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.fortify.property"
            },
            "2": {
              "name": "punctuation.definition.string.begin.fortify"
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.fortify"
            }
          },
          "contentName": "string.template.fortify.schema",
          "patterns": [
            {
              "include": "#reliant-type-content"
            },
            {
              "include": "#fortify-template-expressions"
            }
          ]
        },
        {
          "name": "meta.nested-object.fortify",
          "begin": "([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*:\\s*\\{",
          "end": "\\},?",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.fortify.property"
            }
          },
          "patterns": [
            {
              "include": "#fortify-object-properties"
            }
          ]
        },
        {
          "name": "comment.line.double-slash.fortify",
          "match": "//.*$"
        },
        {
          "name": "comment.block.fortify",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "reliant-type-content": {
      "patterns": [
        {
          "include": "#fortify-conditional-syntax"
        },
        {
          "include": "#fortify-basic-types"
        },
        {
          "include": "#fortify-format-types"
        },
        {
          "include": "#fortify-numeric-types"
        },
        {
          "include": "#fortify-constraints"
        },
        {
          "include": "#fortify-arrays"
        },
        {
          "include": "#fortify-optional"
        },
        {
          "include": "#fortify-unions"
        },
        {
          "include": "#fortify-constants"
        },
        {
          "include": "#fortify-methods"
        },
        {
          "include": "#fortify-operators"
        }
      ]
    },
    "fortify-conditional-syntax": {
      "patterns": [
        {
          "name": "meta.conditional.fortify.complete",
          "begin": "\\b(when)\\s+",
          "end": "(?=\\s*[,}\\]\"'`]|$)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.fortify.when"
            }
          },
          "patterns": [
            {
              "name": "meta.conditional.condition.fortify",
              "begin": "(?<=when\\s)",
              "end": "(?=\\s*\\*\\?\\s*)",
              "patterns": [
                {
                  "include": "#fortify-conditional-condition"
                }
              ]
            },
            {
              "name": "keyword.operator.fortify.conditional-then",
              "match": "\\s*\\*\\?\\s*"
            },
            {
              "name": "meta.conditional.then-branch.fortify",
              "begin": "(?<=\\*\\?\\s*)\\s*",
              "end": "(?=\\s*:|$)",
              "patterns": [
                {
                  "name": "meta.conditional.nested.fortify",
                  "begin": "\\b(when)\\s+",
                  "end": "(?=\\s*:)",
                  "beginCaptures": {
                    "1": {
                      "name": "keyword.control.fortify.when.nested"
                    }
                  },
                  "patterns": [
                    {
                      "name": "meta.conditional.condition.nested.fortify",
                      "begin": "(?<=when\\s)",
                      "end": "(?=\\s*\\*\\?\\s*)",
                      "patterns": [
                        {
                          "include": "#fortify-conditional-condition"
                        }
                      ]
                    },
                    {
                      "name": "keyword.operator.fortify.conditional-then.nested",
                      "match": "\\s*\\*\\?\\s*"
                    },
                    {
                      "name": "meta.conditional.then-type.nested.fortify",
                      "begin": "(?<=\\*\\?\\s*)\\s*",
                      "end": "(?=\\s*:|$)",
                      "patterns": [
                        {
                          "include": "#fortify-type-reference"
                        }
                      ]
                    }
                  ]
                },
                {
                  "include": "#fortify-type-reference"
                }
              ]
            },
            {
              "name": "punctuation.separator.fortify.conditional-else",
              "match": "\\s*:\\s*"
            },
            {
              "name": "meta.conditional.else-branch.fortify",
              "begin": "(?<=:\\s*)\\s*",
              "end": "(?=\\s*[,}\\]\"'`]|$)",
              "patterns": [
                {
                  "name": "meta.conditional.nested-else.fortify",
                  "begin": "\\b(when)\\s+",
                  "end": "(?=\\s*[,}\\]\"'`]|$)",
                  "beginCaptures": {
                    "1": {
                      "name": "keyword.control.fortify.when.nested-else"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#fortify-conditional-syntax"
                    }
                  ]
                },
                {
                  "include": "#fortify-type-reference"
                }
              ]
            }
          ]
        }
      ]
    },
    "fortify-conditional-condition": {
      "patterns": [
        {
          "name": "meta.method-call.complex.fortify.conditional",
          "begin": "([a-zA-Z_$][a-zA-Z0-9_$.]*)(\\.(\\$[a-zA-Z_$][a-zA-Z0-9_$]*))\\s*\\(",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "variable.other.property.fortify.chain"
            },
            "2": {
              "name": "punctuation.accessor.fortify"
            },
            "3": {
              "name": "support.function.fortify.method"
            }
          },
          "patterns": [
            {
              "include": "#fortify-method-arguments"
            }
          ]
        },
        {
          "name": "meta.method-call.standalone.fortify.conditional",
          "begin": "(\\$[a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "support.function.fortify.method"
            }
          },
          "patterns": [
            {
              "include": "#fortify-method-arguments"
            }
          ]
        },
        {
          "name": "variable.other.property.fortify.deep-chain",
          "match": "\\b([a-zA-Z_$][a-zA-Z0-9_$]*(?:\\.[a-zA-Z_$][a-zA-Z0-9_$]*){2,})(?=\\s*[=!<>~$]|\\s*&&|\\s*\\|\\||$)"
        },
        {
          "name": "variable.other.property.fortify.chain",
          "match": "\\b([a-zA-Z_$][a-zA-Z0-9_$]*\\.[a-zA-Z_$][a-zA-Z0-9_$]*)(?=\\s*[=!<>~$]|\\s*&&|\\s*\\|\\||$)"
        },
        {
          "name": "variable.other.property.fortify.simple",
          "match": "\\b([a-zA-Z_$][a-zA-Z0-9_$]*)(?=\\s*[=!<>~]|\\s*&&|\\s*\\|\\||\\s*\\.|$)"
        },
        {
          "name": "keyword.operator.fortify.comparison",
          "match": "(!=|>=|<=|!~|==|=|>|<|~)"
        },
        {
          "name": "keyword.operator.fortify.logical",
          "match": "(&&|\\|\\|)"
        },
        {
          "name": "keyword.operator.fortify.field-access",
          "match": "\\."
        },
        {
          "name": "string.quoted.single.fortify.condition",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.fortify",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.fortify.condition",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.fortify",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "constant.numeric.fortify.condition",
          "match": "\\b\\d+(?:\\.\\d+)?\\b"
        },
        {
          "name": "constant.language.boolean.fortify.condition",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "fortify-method-arguments": {
      "patterns": [
        {
          "name": "string.quoted.single.fortify.argument",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.fortify",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.fortify.argument",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.fortify",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "constant.numeric.fortify.argument",
          "match": "\\b\\d+(?:\\.\\d+)?\\b"
        },
        {
          "name": "constant.language.boolean.fortify.argument",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "variable.other.property.fortify.argument",
          "match": "\\b[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
        },
        {
          "name": "punctuation.separator.fortify.argument",
          "match": ","
        }
      ]
    },
    "fortify-type-reference": {
      "patterns": [
        {
          "include": "#fortify-basic-types"
        },
        {
          "include": "#fortify-format-types"
        },
        {
          "include": "#fortify-numeric-types"
        },
        {
          "include": "#fortify-constraints"
        },
        {
          "include": "#fortify-arrays"
        },
        {
          "include": "#fortify-unions"
        },
        {
          "include": "#fortify-constants"
        }
      ]
    },
    "fortify-basic-types": {
      "patterns": [
        {
          "name": "support.type.fortify.basic",
          "match": "\\b(string|number|boolean|date|any)\\b"
        }
      ]
    },
    "fortify-format-types": {
      "patterns": [
        {
          "name": "support.type.fortify.format",
          "match": "\\b(email|url|url\\.https|url\\.dev|phone|uuid)\\b"
        }
      ]
    },
    "fortify-numeric-types": {
      "patterns": [
        {
          "name": "support.type.fortify.numeric",
          "match": "\\b(positive|negative|double)\\b"
        }
      ]
    },
    "fortify-constraints": {
      "patterns": [
        {
          "name": "meta.constraint.regex.fortify",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [
            {
              "name": "string.regexp.fortify",
              "begin": "/",
              "end": "/([gimsuy]*)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.regexp.fortify"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.regexp.fortify"
                },
                "1": {
                  "name": "keyword.other.regexp.flags.fortify"
                }
              },
              "patterns": [
                {
                  "name": "constant.character.escape.regexp.fortify",
                  "match": "\\\\."
                },
                {
                  "name": "constant.other.character-class.regexp.fortify",
                  "match": "\\[([^\\]\\\\]|\\\\.)*\\]"
                },
                {
                  "name": "keyword.operator.regexp.fortify",
                  "match": "[.*+?^${}()|\\[\\]]"
                }
              ]
            },
            {
              "name": "constant.numeric.fortify.constraint-value",
              "match": "\\d+(?:\\.\\d+)?"
            },
            {
              "name": "punctuation.separator.fortify.constraint",
              "match": ","
            }
          ]
        }
      ]
    },
    "fortify-arrays": {
      "patterns": [
        {
          "name": "meta.array.constrained.fortify",
          "begin": "\\[\\]\\(",
          "end": "\\)",
          "patterns": [
            {
              "name": "constant.numeric.fortify.array-constraint",
              "match": "\\d+"
            },
            {
              "name": "punctuation.separator.fortify.array-constraint",
              "match": ","
            }
          ]
        },
        {
          "name": "punctuation.definition.fortify.array",
          "match": "\\[\\]"
        }
      ]
    },
    "fortify-optional": {
      "patterns": [
        {
          "name": "punctuation.definition.fortify.optional",
          "match": "\\?"
        }
      ]
    },
    "fortify-unions": {
      "patterns": [
        {
          "name": "keyword.operator.fortify.union",
          "match": "\\|"
        }
      ]
    },
    "fortify-constants": {
      "patterns": [
        {
          "name": "meta.function-call.make-const.fortify",
          "begin": "\\b(Make)\\.(const)\\s*\\(",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "support.class.fortify.make"
            },
            "2": {
              "name": "support.function.fortify.const"
            }
          },
          "patterns": [
            {
              "name": "string.quoted.double.fortify.const-value",
              "begin": "\"",
              "end": "\"",
              "patterns": [
                {
                  "name": "constant.character.escape.fortify",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "string.quoted.single.fortify.const-value",
              "begin": "'",
              "end": "'",
              "patterns": [
                {
                  "name": "constant.character.escape.fortify",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "string.template.fortify.const-value",
              "begin": "`",
              "end": "`",
              "patterns": [
                {
                  "name": "constant.character.escape.fortify",
                  "match": "\\\\."
                }
              ]
            }
          ]
        },
        {
          "name": "meta.constant.array.fortify",
          "begin": "=\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "constant.other.fortify.literal.equals"
            }
          },
          "patterns": [
            {
              "name": "string.quoted.double.fortify.literal",
              "begin": "\"",
              "end": "\"",
              "patterns": [
                {
                  "name": "constant.character.escape.fortify",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "string.quoted.single.fortify.literal",
              "begin": "'",
              "end": "'",
              "patterns": [
                {
                  "name": "constant.character.escape.fortify",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "constant.numeric.fortify.literal",
              "match": "\\d+(?:\\.\\d+)?"
            },
            {
              "name": "constant.language.boolean.fortify.literal",
              "match": "\\b(true|false)\\b"
            },
            {
              "name": "punctuation.separator.fortify.literal",
              "match": ","
            }
          ]
        },
        {
          "name": "meta.constant.object.fortify",
          "begin": "=\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "constant.other.fortify.literal.equals"
            }
          },
          "patterns": [
            {
              "name": "string.quoted.double.fortify.literal.key",
              "begin": "\"",
              "end": "\"(?=\\s*:)",
              "patterns": [
                {
                  "name": "constant.character.escape.fortify",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "string.quoted.single.fortify.literal.key",
              "begin": "'",
              "end": "'(?=\\s*:)",
              "patterns": [
                {
                  "name": "constant.character.escape.fortify",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "string.quoted.double.fortify.literal.value",
              "begin": "(?<=:)\\s*\"",
              "end": "\"",
              "patterns": [
                {
                  "name": "constant.character.escape.fortify",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "string.quoted.single.fortify.literal.value",
              "begin": "(?<=:)\\s*'",
              "end": "'",
              "patterns": [
                {
                  "name": "constant.character.escape.fortify",
                  "match": "\\\\."
                }
              ]
            },
            {
              "name": "constant.numeric.fortify.literal",
              "match": "\\b\\d+(?:\\.\\d+)?\\b"
            },
            {
              "name": "constant.language.boolean.fortify.literal",
              "match": "\\b(true|false)\\b"
            },
            {
              "name": "punctuation.separator.fortify.literal.colon",
              "match": ":"
            },
            {
              "name": "punctuation.separator.fortify.literal.comma",
              "match": ","
            }
          ]
        },
        {
          "name": "constant.other.fortify.literal.simple",
          "match": "=(\\w+(?:\\.\\w+)?|true|false|\\d+(?:\\.\\d+)?)",
          "captures": {
            "1": {
              "name": "constant.other.fortify.literal.value"
            }
          }
        }
      ]
    },
    "fortify-methods": {
      "patterns": [
        {
          "name": "support.function.fortify.method",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "fortify-operators": {
      "patterns": [
        {
          "name": "keyword.operator.fortify.field-access",
          "match": "\\."
        }
      ]
    },
    "fortify-template-expressions": {
      "patterns": [
        {
          "name": "meta.embedded.expression.fortify",
          "begin": "\\$\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.fortify"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.fortify"
            }
          },
          "patterns": [
            {
              "include": "source.ts"
            }
          ]
        }
      ]
    }
  }
}